package org.appenders.log4j2.elasticsearch.hc;

/*-
 * #%L
 * log4j2-elasticsearch
 * %%
 * Copyright (C) 2019 Rafal Foltynski
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.fasterxml.jackson.databind.ObjectReader;
import org.appenders.log4j2.elasticsearch.Deserializer;
import org.appenders.log4j2.elasticsearch.JacksonDeserializer;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.CountDownLatch;
import java.util.function.Function;

/**
 * Allows to execute blocking calls in asynchronous framework.
 * {@link #getResult()} will wait until the result is ready. Uses {@link java.util.concurrent.CountDownLatch} internally
 *
 * @param <T> response type
 */
public class BlockingResponseHandler<T extends Response> implements ResponseHandler<T> {

    protected final CountDownLatch countDownLatch = new CountDownLatch(1);
    protected final Function<Exception, T> fallbackResponseTemplate;
    protected final Deserializer<T> deserializer;
    protected T result;

    /**
     * @param deserializer used to deserialize response
     * @param fallbackResponseTemplate used to generate response in case of any failures
     */
    public BlockingResponseHandler(final Deserializer<T> deserializer, final Function<Exception, T> fallbackResponseTemplate) {
        this.deserializer = deserializer;
        this.fallbackResponseTemplate = fallbackResponseTemplate;
    }

    /**
     * @param objectReader used to deserialize response
     * @param fallbackResponseTemplate used to generate response in case of any failures
     * @deprecated As of 1.7, this method will be removed. Use {@link #BlockingResponseHandler(Deserializer, Function)} instead
     */
    @Deprecated
    public BlockingResponseHandler(final ObjectReader objectReader, final Function<Exception, T> fallbackResponseTemplate) {
        this(new JacksonDeserializer<>(objectReader), fallbackResponseTemplate);
    }

    /**
     * Sets the result. Releases threads waiting at {@link #getResult()}
     *
     * @param result result
     */
    @Override
    public final void completed(T result) {
        this.result = result;
        countDownLatch.countDown();
    }

    /**
     * Handles exceptions. Sets response generated by {@link #fallbackResponseTemplate}.
     * Releases threads waiting at {@link #getResult()}
     *
     * @param exception exception to handle
     */
    @Override
    public final void failed(Exception exception) {
        this.result = fallbackResponseTemplate.apply(exception);
        countDownLatch.countDown();
    }

    @Override
    public T deserializeResponse(InputStream inputStream) throws IOException {
        if (inputStream == null) {
            return fallbackResponseTemplate.apply(null);
        }
        return deserializer.read(inputStream);
    }

    /**
     * @return result when available, waits otherwise
     */
    public T getResult() {
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return result;
    }

}
